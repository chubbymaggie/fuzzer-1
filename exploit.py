class Exploit:
  """
  Implements the Strategy Pattern for exploits.
  Example usage:

  sanitization = Exploit(Sanitization)
  sanitization.execute()
  """

  def __init__(self, func=None):
    """
    constructor
    """
    self.name = "Exploit"
    if func:
      self.execute = func

  def execute(self):
    print self.name

  def executeSanitization(self, pages):
    """
    implements the sanitization exploit strategy
    """
    sql_inj_vector = open("FuzzVectors/sqlInjection.txt", "r").read().splitlines()

    for sql_inj in sql_inj_vector:
      print sql_inj

    #raise NotImplementedError("Sanitization " + self.name)

  def executeSensitiveData(self):
    """
    implements the sensitive data exploit strategy
    """
    raise NotImplementedError("Sensitive Data " + self.name)

  def executeDelayedResponse(self):
    """
    implements the delayed response exploit strategy
    """
    raise NotImplementedError("Delayed Response " + self.name)

  def executeHttpResponseCode(self):
    """
    implements the http response code exploit strategy
    """
    raise NotImplementedError("HTTP Response Code " + self.name)

  def _executeVector(vector, page):
    """
    @private
    """
    raise NotImplementedError("Not implemented")
