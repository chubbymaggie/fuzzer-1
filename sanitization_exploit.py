from BeautifulSoup import BeautifulSoup, SoupStrainer	
import requests
import pprint

class SanitizationExploit():
	"""
	implements the concrete sanitization exploit
	strategy
	"""

	def execute(self, pages, session, strategy):
		"""
		execute strategy
		"""
		vectors = strategy._getVectors()

		#for vector in vectors:
			#print(vector)

		'''
		pr = pprint.PrettyPrinter(indent=4)

		for page in pages:
			forms = page.get("inputs").get("forms")
			url = page.get("url")

			for form in forms:
				self._fuzzForm(form, url, sql_vector, session)
		'''

	
	def _fuzzForm(self, form, url, vector, session):
		"""
		fuzz a form by injecting the given vector into all
		of the forms inputs.
		@private
		"""
		pr = pprint.PrettyPrinter(indent=4)
		pr.pprint(form)

		payload = {}
		
		# fuzz all inputs
		for input in form.get("inputs"):
			payload[input] = vector

		action = form.get('action')
		method = form.get('method')
		print(url)
		print(method)
		
		# supported actions are post/get
		
		if method == "post":
			print("sending post request")

			try:
				r = requests.post(url + "/" + action, data = payload)
				if "SQL" in r.text:
					print r.text
			except:
				pass

		elif method == "get":
			print("sending get request")

			try:
				r = requests.get(url + "/" + action, params = payload)

				if "SQL" in r.text:
					print r.text
			except:
				pass

		
		


		

