from logger import *
import time
import random

class DelayedResponseExploit():
	"""
	Implements the concrete delayed response exploit
	strategy.  

	If the response takes longer than the 
	pre-defined threshold, log it.
	"""

	def execute(self, pages, session, strategy):
		"""
		execute strategy
		"""

		DELAY_THRESHOLD = strategy.options.slow_ms
		vectors = strategy._getVectors()

		logger.info("Sending requests to vectors and checking for delayed responses...")

		for page in pages:
			forms = page.get("inputs").get("forms")
			url = page.get("url")

			if strategy.options.random == "False" or strategy.options.random == "false":
				#sequentially
				for form in forms:
					for vector in vectors:

						# Time vector response time
						start_time = time.time()
						response = strategy._executeVector(url, vector, form)
						end_time = time.time()
						total_time = start_time-end_time

						if total_time > DELAY_THRESHOLD :
							logger.info("Delayed Response - \n  Page: %s\n  Form: %s\n  Vector: %s\n  Time: %s\n" 
											% (url,form,vector,total_time) )

			else:
				if len(forms) > 0:
					form = random.choice(forms) # randomly choose a form
					for vector in vectors:

						# Time vector response time
						start_time = time.time()
						response = strategy._executeVector(url, vector, form)
						end_time = time.time()
						total_time = start_time-end_time

						if total_time > DELAY_THRESHOLD :
							logger.info("Delayed Response - \n  Page: %s\n  Form: %s\n  Vector: %s\n  Time: %s\n" 
											% (url,form,vector,total_time) )

