from logger import * # logging output

class SensitiveDataExploit():
	"""
	implements the concrete sensitive data exploit
	strategy
	"""

	def _checkForSensitiveData(self, vector, response, sensitive):
			
		""" 
		check that response has been sanitized. 
		@vector - vector executed
		@response - the response given
		"""

		for item in sensitive:
			if item in response.text:
				logger.info("Sensitive data leaked - \n  Page: %s\n  Form: %s\n  Vector: %s\n  Status:Code: %s\n" % (url,form,vector,response.status_code) )

	def execute(self, pages, session, strategy):
		"""
		execute strategy - fuzz all inputs and make sure 
		they have been sanitized
		"""
		vectors = strategy._getVectors()

		logger.info("checking for sensitive data, random is set to " \
						+ strategy.options.random)

		for page in pages:
			forms = page.get("inputs").get("forms")
			url = page.get("url")
			
			if strategy.options.random == "False" or strategy.options.random == "false":
				# sequentially
				for form in forms:
					for vector in vectors:
						response = strategy._executeVector(url, vector, form)

						if response != None:
							sensitive = open(strategy.options.sensitive, "r").read().splitlines()
							self._checkForSensitiveData(vector, response, sensitive)

			else:

				if len(forms) > 0:
					form = random.choice(forms) # randomly choose a form
					for vector in vectors:
						response = strategy._executeVector(url, vector, form)

						if response != None:
							sensitive = open(strategy.options.sensitive, "r").read().splitlines()
							self._checkForSensitiveData(vector, response, sensitive)

		logger.info("done checking for sensitive data")

	

